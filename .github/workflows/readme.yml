name: Update README with Current Issues

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Get current milestone
        id: milestone
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          MILESTONE_TITLE=$(gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                milestones(states: OPEN, first: 1, orderBy: {field: DUE_DATE, direction: ASC}) {
                  nodes { title }
                }
              }
            }' -f owner='${{ github.repository_owner }}' -f repo='${{ github.event.repository.name }}' | jq -r '.data.repository.milestones.nodes[0].title')
          echo "title=$MILESTONE_TITLE" >> $GITHUB_OUTPUT

      - name: Fetch issues to a file
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Schrijf de output direct naar een tijdelijk bestand in plaats van een variabele
          gh issue list --state open --milestone "${{ steps.milestone.outputs.title }}" --limit 5 --json title,url --template '{{range .}}| [{{.title}}]({{.url}}) |
          {{end}}' > issues_list.md

      - name: Update README.md using Python
        run: |
          python3 -c "
          import re

          # Lees de nieuwe issue-lijst uit het tijdelijke bestand
          with open('issues_list.md', 'r') as f:
              issues_table = f.read().strip()

          # Lees de volledige README
          with open('README.md', 'r') as f:
              readme_content = f.read()

          # Definieer de start- en eindmarkers
          start_marker = ''
          end_marker = ''
          
          # Bouw de vervangende content
          replacement_block = f'{start_marker}\\n{issues_table}\\n{end_marker}'

          # Vervang de content tussen de markers
          # re.DOTALL zorgt ervoor dat '.' ook newlines matcht
          updated_readme = re.sub(f'{start_marker}.*{end_marker}', replacement_block, readme_content, flags=re.DOTALL)
          
          # Schrijf de bijgewerkte content terug naar de README
          with open('README.md', 'w') as f:
              f.write(updated_readme)
          "

      - name: Commit and push if changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "docs: update milestone issues in README" && git push)