name: Update README with Current Issues

on:
  schedule:
    # Draait elke 6 uur
    - cron: "0 */6 * * *"
  # Maakt het mogelijk om de workflow handmatig te starten
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Get current milestone via GraphQL API
        id: milestone
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          # GraphQL query om de titel van de eerste open milestone op te halen (gesorteerd op deadline)
          query=$(cat << 'GRAPHQL'
          query($owner: String!, $repo: String!) {
            repository(owner: $owner, name: $repo) {
              milestones(states: OPEN, first: 1, orderBy: {field: DUE_DATE, direction: ASC}) {
                nodes {
                  title
                }
              }
            }
          }
          GRAPHQL
          )
          
          # Voer de API call uit, parse de JSON output met jq, en zet de titel als output voor de volgende stappen
          MILESTONE_TITLE=$(gh api graphql -f query="$query" -f owner="$OWNER" -f repo="$REPO" | jq -r '.data.repository.milestones.nodes[0].title')
          echo "title=$MILESTONE_TITLE" >> $GITHUB_OUTPUT

      - name: Fetch issues for milestone
        id: issues
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Haalt de 5 nieuwste open issues op voor de huidige milestone en formatteert ze als tabelrijen
          ISSUES_LIST=$(gh issue list --state open --milestone "${{ steps.milestone.outputs.title }}" --limit S --json number,title,url --template '{{range .}}| [{{.title}}]({{.url}}) | {{end}}' | sed 's/|/| /g' | sed 's/|$/|/g')
          echo "issues_table<<EOF" >> $GITHUB_OUTPUT
          echo "$ISSUES_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Update README.md
        run: |
          # Lees de README, vervang de content tussen de markers, en schrijf terug
          awk '//{p=1;print;print "${{ steps.issues.outputs.issues_table }}";next} //{p=0} !p' README.md > README.md.tmp
          mv README.md.tmp README.md

      - name: Commit and push if changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          # Alleen committen en pushen als er daadwerkelijk iets is veranderd
          git diff --quiet && git diff --staged --quiet || (git commit -m "docs: update milestone issues in README" && git push)